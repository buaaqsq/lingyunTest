#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class NodeInfo:
  """
  Attributes:
   - cpu
   - mem
   - disk
   - os
   - load
   - ip
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'cpu', None, None, ), # 1
    (2, TType.STRING, 'mem', None, None, ), # 2
    (3, TType.STRING, 'disk', None, None, ), # 3
    (4, TType.STRING, 'os', None, None, ), # 4
    (5, TType.STRING, 'load', None, None, ), # 5
    (6, TType.STRING, 'ip', None, None, ), # 6
  )

  def __init__(self, cpu=None, mem=None, disk=None, os=None, load=None, ip=None,):
    self.cpu = cpu
    self.mem = mem
    self.disk = disk
    self.os = os
    self.load = load
    self.ip = ip

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.cpu = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.mem = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.disk = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.os = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.load = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.ip = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('NodeInfo')
    if self.cpu is not None:
      oprot.writeFieldBegin('cpu', TType.STRING, 1)
      oprot.writeString(self.cpu)
      oprot.writeFieldEnd()
    if self.mem is not None:
      oprot.writeFieldBegin('mem', TType.STRING, 2)
      oprot.writeString(self.mem)
      oprot.writeFieldEnd()
    if self.disk is not None:
      oprot.writeFieldBegin('disk', TType.STRING, 3)
      oprot.writeString(self.disk)
      oprot.writeFieldEnd()
    if self.os is not None:
      oprot.writeFieldBegin('os', TType.STRING, 4)
      oprot.writeString(self.os)
      oprot.writeFieldEnd()
    if self.load is not None:
      oprot.writeFieldBegin('load', TType.STRING, 5)
      oprot.writeString(self.load)
      oprot.writeFieldEnd()
    if self.ip is not None:
      oprot.writeFieldBegin('ip', TType.STRING, 6)
      oprot.writeString(self.ip)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.cpu is None:
      raise TProtocol.TProtocolException(message='Required field cpu is unset!')
    if self.mem is None:
      raise TProtocol.TProtocolException(message='Required field mem is unset!')
    if self.disk is None:
      raise TProtocol.TProtocolException(message='Required field disk is unset!')
    if self.os is None:
      raise TProtocol.TProtocolException(message='Required field os is unset!')
    if self.ip is None:
      raise TProtocol.TProtocolException(message='Required field ip is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HostInformation:
  """
  Attributes:
   - cpu_info
   - cpu_num
   - cpu_speed
   - disk_total
   - mem_total
   - machine_type
   - os_name
   - boottime
   - mtu
   - swap_total
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'cpu_info', None, None, ), # 1
    (2, TType.I16, 'cpu_num', None, None, ), # 2
    (3, TType.DOUBLE, 'cpu_speed', None, None, ), # 3
    (4, TType.DOUBLE, 'disk_total', None, None, ), # 4
    (5, TType.DOUBLE, 'mem_total', None, None, ), # 5
    (6, TType.STRING, 'machine_type', None, None, ), # 6
    (7, TType.STRING, 'os_name', None, None, ), # 7
    (8, TType.STRING, 'boottime', None, None, ), # 8
    (9, TType.I64, 'mtu', None, None, ), # 9
    (10, TType.DOUBLE, 'swap_total', None, None, ), # 10
  )

  def __init__(self, cpu_info=None, cpu_num=None, cpu_speed=None, disk_total=None, mem_total=None, machine_type=None, os_name=None, boottime=None, mtu=None, swap_total=None,):
    self.cpu_info = cpu_info
    self.cpu_num = cpu_num
    self.cpu_speed = cpu_speed
    self.disk_total = disk_total
    self.mem_total = mem_total
    self.machine_type = machine_type
    self.os_name = os_name
    self.boottime = boottime
    self.mtu = mtu
    self.swap_total = swap_total

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.cpu_info = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I16:
          self.cpu_num = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.DOUBLE:
          self.cpu_speed = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.DOUBLE:
          self.disk_total = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.DOUBLE:
          self.mem_total = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.machine_type = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.os_name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.boottime = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I64:
          self.mtu = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.DOUBLE:
          self.swap_total = iprot.readDouble();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HostInformation')
    if self.cpu_info is not None:
      oprot.writeFieldBegin('cpu_info', TType.STRING, 1)
      oprot.writeString(self.cpu_info)
      oprot.writeFieldEnd()
    if self.cpu_num is not None:
      oprot.writeFieldBegin('cpu_num', TType.I16, 2)
      oprot.writeI16(self.cpu_num)
      oprot.writeFieldEnd()
    if self.cpu_speed is not None:
      oprot.writeFieldBegin('cpu_speed', TType.DOUBLE, 3)
      oprot.writeDouble(self.cpu_speed)
      oprot.writeFieldEnd()
    if self.disk_total is not None:
      oprot.writeFieldBegin('disk_total', TType.DOUBLE, 4)
      oprot.writeDouble(self.disk_total)
      oprot.writeFieldEnd()
    if self.mem_total is not None:
      oprot.writeFieldBegin('mem_total', TType.DOUBLE, 5)
      oprot.writeDouble(self.mem_total)
      oprot.writeFieldEnd()
    if self.machine_type is not None:
      oprot.writeFieldBegin('machine_type', TType.STRING, 6)
      oprot.writeString(self.machine_type)
      oprot.writeFieldEnd()
    if self.os_name is not None:
      oprot.writeFieldBegin('os_name', TType.STRING, 7)
      oprot.writeString(self.os_name)
      oprot.writeFieldEnd()
    if self.boottime is not None:
      oprot.writeFieldBegin('boottime', TType.STRING, 8)
      oprot.writeString(self.boottime)
      oprot.writeFieldEnd()
    if self.mtu is not None:
      oprot.writeFieldBegin('mtu', TType.I64, 9)
      oprot.writeI64(self.mtu)
      oprot.writeFieldEnd()
    if self.swap_total is not None:
      oprot.writeFieldBegin('swap_total', TType.DOUBLE, 10)
      oprot.writeDouble(self.swap_total)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.cpu_info is None:
      raise TProtocol.TProtocolException(message='Required field cpu_info is unset!')
    if self.cpu_num is None:
      raise TProtocol.TProtocolException(message='Required field cpu_num is unset!')
    if self.cpu_speed is None:
      raise TProtocol.TProtocolException(message='Required field cpu_speed is unset!')
    if self.disk_total is None:
      raise TProtocol.TProtocolException(message='Required field disk_total is unset!')
    if self.mem_total is None:
      raise TProtocol.TProtocolException(message='Required field mem_total is unset!')
    if self.machine_type is None:
      raise TProtocol.TProtocolException(message='Required field machine_type is unset!')
    if self.os_name is None:
      raise TProtocol.TProtocolException(message='Required field os_name is unset!')
    if self.boottime is None:
      raise TProtocol.TProtocolException(message='Required field boottime is unset!')
    if self.mtu is None:
      raise TProtocol.TProtocolException(message='Required field mtu is unset!')
    if self.swap_total is None:
      raise TProtocol.TProtocolException(message='Required field swap_total is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Percentage:
  """
  Attributes:
   - load_one
   - load_five
   - load_fifteen
   - cpu_intr
   - cpu_sintr
   - cpu_idle
   - cpu_aidle
   - cpu_nice
   - cpu_user
   - cpu_system
   - cpu_wio
   - part_max_used
   - mem_used
  """

  thrift_spec = (
    None, # 0
    (1, TType.DOUBLE, 'load_one', None, None, ), # 1
    (2, TType.DOUBLE, 'load_five', None, None, ), # 2
    (3, TType.DOUBLE, 'load_fifteen', None, None, ), # 3
    (4, TType.DOUBLE, 'cpu_intr', None, None, ), # 4
    (5, TType.DOUBLE, 'cpu_sintr', None, None, ), # 5
    (6, TType.DOUBLE, 'cpu_idle', None, None, ), # 6
    (7, TType.DOUBLE, 'cpu_aidle', None, None, ), # 7
    (8, TType.DOUBLE, 'cpu_nice', None, None, ), # 8
    (9, TType.DOUBLE, 'cpu_user', None, None, ), # 9
    (10, TType.DOUBLE, 'cpu_system', None, None, ), # 10
    (11, TType.DOUBLE, 'cpu_wio', None, None, ), # 11
    (12, TType.DOUBLE, 'part_max_used', None, None, ), # 12
    (13, TType.DOUBLE, 'mem_used', None, None, ), # 13
  )

  def __init__(self, load_one=None, load_five=None, load_fifteen=None, cpu_intr=None, cpu_sintr=None, cpu_idle=None, cpu_aidle=None, cpu_nice=None, cpu_user=None, cpu_system=None, cpu_wio=None, part_max_used=None, mem_used=None,):
    self.load_one = load_one
    self.load_five = load_five
    self.load_fifteen = load_fifteen
    self.cpu_intr = cpu_intr
    self.cpu_sintr = cpu_sintr
    self.cpu_idle = cpu_idle
    self.cpu_aidle = cpu_aidle
    self.cpu_nice = cpu_nice
    self.cpu_user = cpu_user
    self.cpu_system = cpu_system
    self.cpu_wio = cpu_wio
    self.part_max_used = part_max_used
    self.mem_used = mem_used

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.DOUBLE:
          self.load_one = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.DOUBLE:
          self.load_five = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.DOUBLE:
          self.load_fifteen = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.DOUBLE:
          self.cpu_intr = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.DOUBLE:
          self.cpu_sintr = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.DOUBLE:
          self.cpu_idle = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.DOUBLE:
          self.cpu_aidle = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.DOUBLE:
          self.cpu_nice = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.DOUBLE:
          self.cpu_user = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.DOUBLE:
          self.cpu_system = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.DOUBLE:
          self.cpu_wio = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.DOUBLE:
          self.part_max_used = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.DOUBLE:
          self.mem_used = iprot.readDouble();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Percentage')
    if self.load_one is not None:
      oprot.writeFieldBegin('load_one', TType.DOUBLE, 1)
      oprot.writeDouble(self.load_one)
      oprot.writeFieldEnd()
    if self.load_five is not None:
      oprot.writeFieldBegin('load_five', TType.DOUBLE, 2)
      oprot.writeDouble(self.load_five)
      oprot.writeFieldEnd()
    if self.load_fifteen is not None:
      oprot.writeFieldBegin('load_fifteen', TType.DOUBLE, 3)
      oprot.writeDouble(self.load_fifteen)
      oprot.writeFieldEnd()
    if self.cpu_intr is not None:
      oprot.writeFieldBegin('cpu_intr', TType.DOUBLE, 4)
      oprot.writeDouble(self.cpu_intr)
      oprot.writeFieldEnd()
    if self.cpu_sintr is not None:
      oprot.writeFieldBegin('cpu_sintr', TType.DOUBLE, 5)
      oprot.writeDouble(self.cpu_sintr)
      oprot.writeFieldEnd()
    if self.cpu_idle is not None:
      oprot.writeFieldBegin('cpu_idle', TType.DOUBLE, 6)
      oprot.writeDouble(self.cpu_idle)
      oprot.writeFieldEnd()
    if self.cpu_aidle is not None:
      oprot.writeFieldBegin('cpu_aidle', TType.DOUBLE, 7)
      oprot.writeDouble(self.cpu_aidle)
      oprot.writeFieldEnd()
    if self.cpu_nice is not None:
      oprot.writeFieldBegin('cpu_nice', TType.DOUBLE, 8)
      oprot.writeDouble(self.cpu_nice)
      oprot.writeFieldEnd()
    if self.cpu_user is not None:
      oprot.writeFieldBegin('cpu_user', TType.DOUBLE, 9)
      oprot.writeDouble(self.cpu_user)
      oprot.writeFieldEnd()
    if self.cpu_system is not None:
      oprot.writeFieldBegin('cpu_system', TType.DOUBLE, 10)
      oprot.writeDouble(self.cpu_system)
      oprot.writeFieldEnd()
    if self.cpu_wio is not None:
      oprot.writeFieldBegin('cpu_wio', TType.DOUBLE, 11)
      oprot.writeDouble(self.cpu_wio)
      oprot.writeFieldEnd()
    if self.part_max_used is not None:
      oprot.writeFieldBegin('part_max_used', TType.DOUBLE, 12)
      oprot.writeDouble(self.part_max_used)
      oprot.writeFieldEnd()
    if self.mem_used is not None:
      oprot.writeFieldBegin('mem_used', TType.DOUBLE, 13)
      oprot.writeDouble(self.mem_used)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.load_one is None:
      raise TProtocol.TProtocolException(message='Required field load_one is unset!')
    if self.load_five is None:
      raise TProtocol.TProtocolException(message='Required field load_five is unset!')
    if self.load_fifteen is None:
      raise TProtocol.TProtocolException(message='Required field load_fifteen is unset!')
    if self.cpu_intr is None:
      raise TProtocol.TProtocolException(message='Required field cpu_intr is unset!')
    if self.cpu_sintr is None:
      raise TProtocol.TProtocolException(message='Required field cpu_sintr is unset!')
    if self.cpu_idle is None:
      raise TProtocol.TProtocolException(message='Required field cpu_idle is unset!')
    if self.cpu_nice is None:
      raise TProtocol.TProtocolException(message='Required field cpu_nice is unset!')
    if self.cpu_user is None:
      raise TProtocol.TProtocolException(message='Required field cpu_user is unset!')
    if self.cpu_system is None:
      raise TProtocol.TProtocolException(message='Required field cpu_system is unset!')
    if self.cpu_wio is None:
      raise TProtocol.TProtocolException(message='Required field cpu_wio is unset!')
    if self.part_max_used is None:
      raise TProtocol.TProtocolException(message='Required field part_max_used is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HostMoniter:
  """
  Attributes:
   - percentage
   - disk_free
   - proc_run
   - mem_cached
   - mem_free
   - mem_buffers
   - mem_shared
   - proc_total
   - swap_free
   - pkts_out
   - pkts_in
   - bytes_in
   - bytes_out
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'percentage', (Percentage, Percentage.thrift_spec), None, ), # 1
    (2, TType.DOUBLE, 'disk_free', None, None, ), # 2
    (3, TType.I16, 'proc_run', None, None, ), # 3
    (4, TType.DOUBLE, 'mem_cached', None, None, ), # 4
    (5, TType.DOUBLE, 'mem_free', None, None, ), # 5
    (6, TType.STRING, 'mem_buffers', None, None, ), # 6
    (7, TType.STRING, 'mem_shared', None, None, ), # 7
    (8, TType.STRING, 'proc_total', None, None, ), # 8
    (9, TType.STRING, 'swap_free', None, None, ), # 9
    (10, TType.DOUBLE, 'pkts_out', None, None, ), # 10
    (11, TType.DOUBLE, 'pkts_in', None, None, ), # 11
    (12, TType.DOUBLE, 'bytes_in', None, None, ), # 12
    (13, TType.DOUBLE, 'bytes_out', None, None, ), # 13
  )

  def __init__(self, percentage=None, disk_free=None, proc_run=None, mem_cached=None, mem_free=None, mem_buffers=None, mem_shared=None, proc_total=None, swap_free=None, pkts_out=None, pkts_in=None, bytes_in=None, bytes_out=None,):
    self.percentage = percentage
    self.disk_free = disk_free
    self.proc_run = proc_run
    self.mem_cached = mem_cached
    self.mem_free = mem_free
    self.mem_buffers = mem_buffers
    self.mem_shared = mem_shared
    self.proc_total = proc_total
    self.swap_free = swap_free
    self.pkts_out = pkts_out
    self.pkts_in = pkts_in
    self.bytes_in = bytes_in
    self.bytes_out = bytes_out

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.percentage = Percentage()
          self.percentage.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.DOUBLE:
          self.disk_free = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I16:
          self.proc_run = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.DOUBLE:
          self.mem_cached = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.DOUBLE:
          self.mem_free = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.mem_buffers = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.mem_shared = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.proc_total = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.swap_free = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.DOUBLE:
          self.pkts_out = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.DOUBLE:
          self.pkts_in = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.DOUBLE:
          self.bytes_in = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.DOUBLE:
          self.bytes_out = iprot.readDouble();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HostMoniter')
    if self.percentage is not None:
      oprot.writeFieldBegin('percentage', TType.STRUCT, 1)
      self.percentage.write(oprot)
      oprot.writeFieldEnd()
    if self.disk_free is not None:
      oprot.writeFieldBegin('disk_free', TType.DOUBLE, 2)
      oprot.writeDouble(self.disk_free)
      oprot.writeFieldEnd()
    if self.proc_run is not None:
      oprot.writeFieldBegin('proc_run', TType.I16, 3)
      oprot.writeI16(self.proc_run)
      oprot.writeFieldEnd()
    if self.mem_cached is not None:
      oprot.writeFieldBegin('mem_cached', TType.DOUBLE, 4)
      oprot.writeDouble(self.mem_cached)
      oprot.writeFieldEnd()
    if self.mem_free is not None:
      oprot.writeFieldBegin('mem_free', TType.DOUBLE, 5)
      oprot.writeDouble(self.mem_free)
      oprot.writeFieldEnd()
    if self.mem_buffers is not None:
      oprot.writeFieldBegin('mem_buffers', TType.STRING, 6)
      oprot.writeString(self.mem_buffers)
      oprot.writeFieldEnd()
    if self.mem_shared is not None:
      oprot.writeFieldBegin('mem_shared', TType.STRING, 7)
      oprot.writeString(self.mem_shared)
      oprot.writeFieldEnd()
    if self.proc_total is not None:
      oprot.writeFieldBegin('proc_total', TType.STRING, 8)
      oprot.writeString(self.proc_total)
      oprot.writeFieldEnd()
    if self.swap_free is not None:
      oprot.writeFieldBegin('swap_free', TType.STRING, 9)
      oprot.writeString(self.swap_free)
      oprot.writeFieldEnd()
    if self.pkts_out is not None:
      oprot.writeFieldBegin('pkts_out', TType.DOUBLE, 10)
      oprot.writeDouble(self.pkts_out)
      oprot.writeFieldEnd()
    if self.pkts_in is not None:
      oprot.writeFieldBegin('pkts_in', TType.DOUBLE, 11)
      oprot.writeDouble(self.pkts_in)
      oprot.writeFieldEnd()
    if self.bytes_in is not None:
      oprot.writeFieldBegin('bytes_in', TType.DOUBLE, 12)
      oprot.writeDouble(self.bytes_in)
      oprot.writeFieldEnd()
    if self.bytes_out is not None:
      oprot.writeFieldBegin('bytes_out', TType.DOUBLE, 13)
      oprot.writeDouble(self.bytes_out)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.percentage is None:
      raise TProtocol.TProtocolException(message='Required field percentage is unset!')
    if self.disk_free is None:
      raise TProtocol.TProtocolException(message='Required field disk_free is unset!')
    if self.proc_run is None:
      raise TProtocol.TProtocolException(message='Required field proc_run is unset!')
    if self.mem_cached is None:
      raise TProtocol.TProtocolException(message='Required field mem_cached is unset!')
    if self.mem_free is None:
      raise TProtocol.TProtocolException(message='Required field mem_free is unset!')
    if self.mem_buffers is None:
      raise TProtocol.TProtocolException(message='Required field mem_buffers is unset!')
    if self.mem_shared is None:
      raise TProtocol.TProtocolException(message='Required field mem_shared is unset!')
    if self.proc_total is None:
      raise TProtocol.TProtocolException(message='Required field proc_total is unset!')
    if self.swap_free is None:
      raise TProtocol.TProtocolException(message='Required field swap_free is unset!')
    if self.pkts_out is None:
      raise TProtocol.TProtocolException(message='Required field pkts_out is unset!')
    if self.pkts_in is None:
      raise TProtocol.TProtocolException(message='Required field pkts_in is unset!')
    if self.bytes_in is None:
      raise TProtocol.TProtocolException(message='Required field bytes_in is unset!')
    if self.bytes_out is None:
      raise TProtocol.TProtocolException(message='Required field bytes_out is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class InvalidOperation(TException):
  """
  Attributes:
   - what
   - why
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'what', None, None, ), # 1
    (2, TType.STRING, 'why', None, None, ), # 2
  )

  def __init__(self, what=None, why=None,):
    self.what = what
    self.why = why

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.what = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.why = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('InvalidOperation')
    if self.what is not None:
      oprot.writeFieldBegin('what', TType.I32, 1)
      oprot.writeI32(self.what)
      oprot.writeFieldEnd()
    if self.why is not None:
      oprot.writeFieldBegin('why', TType.STRING, 2)
      oprot.writeString(self.why)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __str__(self):
    return repr(self)

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
